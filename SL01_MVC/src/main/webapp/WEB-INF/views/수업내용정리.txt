[수업 내용 정리]

1. home.jsp
	a href="/scott/dept" 추가															OK2

2. ScottController 추가(예전에 했던 Handler라고 생성) 							OK3
	요청을 처리해주는 함수
	
	@Autowired
	DeptMapper deptMapper;

	// 컨트롤 메서드																			OK4
	dept() {
		ArrayList<DeptDTO> list = this.deptMapper.부서메서드();		
		model.addA("list","list")
		return "/scott/dept";															OK5
	
	}

3. org.doit.ik.domain
	DeptDTO.java																		OK7

	org.doit.ik.mapper.scott										
	DeptMapper.java 인터페이스 														OK6	
				
	DeptMapper.xml 매퍼 파일															OK8
	
4. views 폴더
		ㄴ scott 폴더
			  ㄴ dept.jsp 																	OK1
	dept.jsp
	부서 정보 출력
	
	
5. 부서번호를 체크한 후에 검색(search) 버튼을 클릭하면 
	체크된 부서원들만 출력(조회)
	
6. JS 추가

7. ScottController에 함수 추가



[과제]


1. jsp 밑부분 스크립트에

      // 새로 생성되는 부서 아닌 애들도 삭제 클릭 이벤트
      $("#tbl-dept > tbody > tr > td:nth-child(5) > span").on("click", function(event){
         alert("클릭 부서 삭제 이벤트(기존)");
         deptno = $(this).data("deptno")
         //alert(deptno)
         const dept = {
            deptno:deptno
         };
         
         deptService.deleteDept(dept, function(result) {
            
            if (result === "SUCCESS") {
               
               $(event.target).closest('tr').remove();
               
            }
            
         })//delete

를 넣어서 ajax 결과 반영하는 곳 코딩



2. dept.js 에서 deptService 함수에 deleteDept ajax 추가

  //부서 삭제 함수
    function deleteDept(dept, callback, error) {
        console.log("> deptService.deleteDept().........");

        $.ajax({
            type: 'POST',
            url: '/scott/dept/delete',
            data: JSON.stringify(dept), 
            contentType: "application/json; charset=utf-8",
            cache: false,
            success: function(result, status, xhr) {
                if (callback) {
                    callback(result); 
                }
            },
            error: function(xhr, status, er) {
                if (error) {
                    error(er); 
                }
            }
        });
    } // deleteDept 함수 종료


3. Rest컨트롤러에 deleteDept 추가

   //ResponseEntity :: 응답 상태와 응답 결과값을 담는 객체
   @PostMapping("/scott/dept/delete")
   public ResponseEntity<String> deleteDept(@RequestBody DeptDTO dto) { //JSON이 매개변수로 넘어온다? -> 바로 DTO로 담는 스프링의 갓기능
      logger.info("> ScottRestController.deleteDept()...");
      int rowCount = this.deptMapper.deleteDept(dto);
      
      return rowCount ==1 
            ? new ResponseEntity<>("SUCCESS" , HttpStatus.OK)
            : new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
   }

4. DeptMapper에 int deleteDept(DeptDTO dto); 추가

5.DeptMapper.xml에 쿼리 작성
     <delete id="deleteDept">
         
      delete from dept
      where deptno = #{deptno}

   </delete>




























