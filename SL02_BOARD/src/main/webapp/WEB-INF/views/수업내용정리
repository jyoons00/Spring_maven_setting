[수업내용정리]

N-tier

3-Tier(티어) 방식
	1) 화면 계층 ( - Presentation Tier )
	2) 로직 계층 ( Business Tier )
	3) 데이터 계층 ( == 영속 계층, Persistence Tier )

스프링 MVC 

> 패키지의 이름 명명. 
org.doit.ik 최상위 패키지
 ㄴ config 패키지 = 프로젝트 관련 설정 파일
 ㄴ controller 패키지 = 컨트롤러
 ㄴ service 패키지 = 서비스 
 ㄴ domain 패키지= VO, DTO 객체 (VO = 객체의 정보를 저장만하고 읽기 용도로 씀 밸류 오브젝트), (DTO = 값을 담고 전달하고 수정하는 작업도 한다.)
 ㄴ persistence 패키지 = DAO, mybatis
 ㄴ exception 패키지 = 예외처리
 ㄴ aop 패키지 = 스프링 AOP
 ㄴ security 패키지 = 스프링 보안(인증, 권한)
 ㄴ util 패키지 = 각종 유용한 유틸리티



일단 테이블 하나 만들어두자

        CREATE TABLE tbl_board
    (
        bno number(10)
      , title varchar2(200) not null
      , content varchar2(2000) not null
      , writer varchar2(50) not null
      , regdate date default sysdate
      , updatedate date default sysdate
    );
    
    alter table tbl_board add constraint pk_tblboard_bno primary key(bno);
    
    CREATE SEQUENCE seq_board;  


*스토리보드 
PowerPoint / Pencil Mockup / Figma 툴: 화면구성, 설계
	


1) domain
		ㄴ BoardVO.java
		
2) 게시판 목록 조회 페이지 구현
	mapper 패키지
		ㄴ BoardMapper.java 인터페이스
		ㄴ BoardMapper.xml 매퍼 파일

3) home.jsp를 메인페이지로 설정 
	<a href="/board/list">/board/list</a>

4) BoardController 
	list 컨트롤러 메서드 구현.
	
5)  views
		ㄴ board 폴더
			  ㄴ list.jsp 

6) service 패키지에 
		ㄴ BoardService 인터페이스 추가
		ㄴBoardServiceImpl.java 추가
		
		객체 생성되었는지 root-context에서 확인해보면 서비스 객체 생성이 안되어있음..
		BoardService 인터페이스에 @Service 이거 붙이고 나니까 BoardServiceImpl 객체가 잘 생성된다.

		

		root-context.xml에 아래 구문이 없으면 스프링빈 객체가 안생긴다. (나중에 함 알아봐야 할듯, 암튼 있는 상태인데도 첨에 안생겨서 @Service 붙인다고 함)
	   <!-- Root Context: defines shared resources visible to all other web components -->
	   <context:component-scan base-package="org.doit.ik"></context:component-scan>
   

		


7) 보드 서비스 임플에서 쿼리 호출
	@Override
		public List<BoardVO> getList() {
			log.info(">BoardServiceImpl.getList().... ");
			return this.boardMapper.getList(); //BoardMapper.xml의 쿼리 호출
		}

8) 보드 컨트롤러에서 의존성 주입
	//@Autowired
	private BoardService boardService; // 의존성 주입

	@GetMapping("/board/list")
	public String list(Model model) {
		log.info("> BoardController.list()...");
		model.addAttribute("list", this.boardService.getList());
		
		return "/board/list";
	}



9) 글쓰기 
	<a href="/board/register">글쓰기</a>



10) BoardController 열기
	
	// [2]번 방법 (리턴 타입이 void)
	@GetMapping("/board/list")
	public void list(Model model) {
		log.info("> BoardController.list()...");
		model.addAttribute("list", this.boardService.getList());
	}



11) 이제 컨트롤러 메서드가 필요함 다시 BoardController에 간다.

	  // register.jsp로 이동하도록 하는 것이다. 이제 Board 폴더에 register.jsp 만들면 된다.
	  @GetMapping("/board/register")
	  public void register() {
		log.info("> BoardController.register()...");
  	  }



12) DB컬럼명 == vo필드명 == 태그 네임속성명 해야됨 + 겟/셋터 이거인듯


13) 글작성을 위한 로직 BoardController 열기

	위에 있었던 GetMapping을 PostMapping으로 오버로딩
		
	// 글쓰기의 제출 버튼을 눌렀을 때
	// 리다이넥트 시켜야 함
	@PostMapping("/board/register")
	public String register(BoardVO board) {
		log.info("> BoardController.register()...POST");
		
		// 스프링에서 리다이렉트 시키기 (문법)
		return "redirect: ";
		
	}


14) 글 저장을 위해 서비스 구현해야 한다. BoardMapper.java를 띄워보자


15) BoardService로 이동
			void register(BoardVO board);

16) BoardServiceImpl로 이동
			@Override
			public void register(BoardVO board) {
				log.info(">BoardServiceImpl.register().... ");
				this.boardMapper.insert(board); //BoardMapper.xml의 쿼리 호출		
			}

17) BoardController로 이동
		


--- 메모 놓침


19) BoardMapper.java

	void insertSelectKey(BoardVO board); // 새글 쓰기 + 글 번호(PK) 반환 = 작성완료 메세지를 띄우기 위해서
	// 이 함수를 안만들려면 insert할 때 seq 자동으로 들어간 후에 쿼리를 한번 더 날려서 값을 또 가져와야 하기 때문에
	// 스프링에서는 어떻게하는지 한번 실습해보기 위한 함수이다.


20) BoardMapper.xml

<!-- void insertSelectKey(BoardVO board); // 새글 쓰기 + 글 번호(PK) 반환 = 작성완료 메세지를 띄우기 위해서 -->
	<insert id="insertSelectKey" parameterType="org.doit.ik.domain.BoardVO">
	<selectKey order="BEFORE" resultType="long" keyProperty="bno">
		SELECT seq_board.nextval
		FROM dual
	</selectKey>
		 INSERT INTO tbl_board (bno, title, content, writer)
     	 VALUES ( #{bno},  #{title}, #{content}, #{writer} )
	</insert>	


21) BoardServiceImpl
	@Override
   public void register(BoardVO board) {
       log.info(">BoardServiceImpl.register().... ");
      //  this.boardMapper.insert(board); //BoardMapper.xml의 쿼리 호출
       this.boardMapper.insertSelectKey(board); //글번호가 저장되어 있음
   }



22)  BoardController

// 새글 메세지
	// <button type="submit">Submit</button>
	@PostMapping("/register")
	public String register(BoardVO board, RedirectAttributes rttr) {
		log.info("> BoardController.register()...POST");
		this.boardService.register(board); // 저장용
		rttr.addFlashAttribute("result",board.getBno());
		// 스프링에서 리다이렉트 시키기 (문법)
		return "redirect:/board/list ";
		
	}

23) list.jsp 

	<script type="text/javascript">
  	$(function() {
  		var result = '<c:out value="${result}"/>';
  	});
  </script>

정리 포기





